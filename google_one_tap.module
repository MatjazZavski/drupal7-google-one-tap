<?php

/**
 * @file
 * Google One Tap .module file.
 */

/**
 * Implements hook_preprocess_page().
 */
function google_one_tap_preprocess_page(&$variables) {
  if(variable_get('gauth_name', FALSE) == FALSE) {
    drupal_set_message(t('You have to choose GAuth user in Google One Tap Settings.'), 'warning');
    return;
  }
  // Return if user is anonymous, not on the front page,
  // login page or register page.
  if (!user_is_anonymous()) {
    return;
  }
  // Prevent login after user log's out.
  elseif (!empty($_COOKIE['Drupal_visitor_user_logged_out'])) {
    user_cookie_delete('user_logged_out');
    drupal_add_js(['logged_out' => 'true'], 'setting');
  }
  // Check if we have any page restriction.
  else {
    $allow = TRUE;
    // Check if we have any page restriction.
    if ($pages = variable_get('pages')) {
      // Get current path.
      $current_path = current_path();
      // Go through each defined path.
      foreach ($pages as $page) {
        // Check if we have '*' in our path.
        if (strpos($page, '*') !== FALSE) {
          // Get full  path before '*'.
          $url = strstr($page, '*', TRUE);
          // If we are on the right path skip default_pages validation
          // by setting $allow to FALSE.
          if (strpos($current_path, $url) !== FALSE && variable_get('pages_option') == 'show') {
            $allow = FALSE;
            break;
          }
          else {
            continue;
          }
        }
        // If we are on the right path skip default_pages validation
        // by setting $allow to FALSE.
        elseif (array_search($current_path, $pages) !== FALSE && variable_get('pages_option') == 'show') {
          $allow = FALSE;
          break;
        }
      }
    }
    // Check default pages.
    if ($allow) {
      // Get default pages.
      $default_pages = variable_get('default_pages');
      // Go through each one.
      foreach ($default_pages as $page) {
        // If we are on front page and option is enabled break.
        if ($default_pages['front'] && drupal_is_front_page()) {
          break;
        }
        // If we are on the login page and option is enabled break.
        elseif ($default_pages['login'] && (current_path() == 'user/login' || current_path() == 'user')) {
          break;
        }
        // If we are on the register page and option is enabled break.
        elseif ($default_pages['register'] && current_path() == 'user/register') {
          break;
        }
        // If something wrong is added just return.
        else {
          return;
        }
      }
    }
    // Add Google One Tap library, custom js and sent client id to custom JS.
    $client = gauth_client_get(variable_get('gauth_name'), FALSE);
    drupal_add_js('https://smartlock.google.com/client', 'external');
    drupal_add_js(drupal_get_path('module', 'google_one_tap') . '/google-one-tap.js');
    drupal_add_js(['client_id' => $client->getClientId()], 'setting');
  }
}

/**
 * Implements hook_menu().
 */
function google_one_tap_menu() {
  $items = [];

  // Google settings menu.
  $items['admin/config/services/google_one_tap'] = [
    'title'           => 'Google One Tap Settings',
    'description'     => 'Google One Tap settings.',
    'page callback' => 'drupal_get_form',
    'page arguments'  => ['google_one_tap_settings_form'],
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  ];
  // Callback for google one tap login.
  $items['google-one-tap/login'] = [
    'page callback' => '_google_one_tap_user_login',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Callback function when user log's in.
 *
 * @return bool
 *   Return if error.
 *
 * @throws \Exception
 */
function _google_one_tap_user_login() {
  // Check if we have function and valid token.
  $info = libraries_load('google-api-php-client');
  if (!$info['loaded']) {
    watchdog('Google One Tap', "Can't authenticate with google as library is missing check Status report or Readme for requirements", array(), WATCHDOG_ERROR);
    return FALSE;
  }
  if (!$token = $_POST['idToken']) {
    watchdog('Google One Tap', "Missing idToken", array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Verify token.
  $client = gauth_client_get(variable_get('gauth_name'), FALSE);
  $payload = $client->verifyIdToken($token);
  if (!$payload) {
    watchdog('Google One Tap', 'Invalid Token', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Checks if we are using option domain restriction.
  if (variable_get('use_domain')) {
    if ($payload['hd'] != variable_get('domain_name')) {
      drupal_set_message(t('You are not authenticated user of domain %domain', ['%domain' => variable_get('domain_name')]), 'error');
      user_cookie_save(['user_logged_out' => TRUE]);
      return NULL;
    }
  }

  // Throw exception for wrong email.
  if (empty($payload['email']) || !valid_email_address($payload['email'])) {
    drupal_set_message(t('Incorrect email address'), 'error');
    return NULL;
  }

  // If user doesn't exist create new one.
  if (!$user = user_load_by_mail($payload['email'])) {
    // Add notice.
    watchdog('Google One Tap', 'Registering a new user for &mail', array('%mail' => $payload['email']), WATCHDOG_NOTICE);
    $edit = array(
      'name' => findNextAvailableAccountName($payload['name']),
      'mail' => $payload['email'],
      'status' => 1,
    );
    $user = '';
  }
  // If user is blocked throw exception.
  elseif (user_is_blocked($user->name)) {
    drupal_set_message(t('The user has not been activated or is blocked.'), 'error');
    watchdog('Google One Tap', 'User %user has not been activated or is blocked', array('%user' => $user->name), WATCHDOG_ERROR);
    user_cookie_save(['user_logged_out' => TRUE]);
    return NULL;
  }
  // If we have user decode std class to array.
  else {
    $edit = json_decode(json_encode($user), TRUE);
  }

  // Data alter for adding new user variables.
  drupal_alter('google_one_tap_new_user', $edit);

  // Save users data.
  $user = user_save($user, $edit);

  // Login user.
  $user_id['uid'] = $user->uid;
  user_login_submit('', $user_id);
}

/**
 * Implements hook_FORM_ID_form().
 *
 * Configuration form for google one tap.
 */
function google_one_tap_settings_form($form, &$form_state) {
  // Get all users from gauth.
  $query = db_select('gauth_accounts', 'ga');
  $query->fields('ga');
  $result = $query->execute()->fetchAll();

  if (!empty($result)) {
    $options = [];
    $options[''] = t('Select a user');
    foreach ($result as $item) {
      $options[$item->id] = $item->name;
    }
  }
  else {
    $options[''] = '- No accounts -';
    form_set_error('gauth_name', t('You have no accounts created in gauth module. Please create one and choose account below to continue.'));
  }
  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['settings']['gauth_name'] = array(
    '#type' => 'select',
    '#title' => t('User'),
    '#description' => t('You need to select account from gauth module.'),
    '#default_value' => variable_get('gauth_name', ''),
    '#required' => TRUE ,
    '#options' => $options,
    '#weight' => -10,
  );
  $form['settings']['domain'] = array(
    '#type' => 'fieldset',
    '#title' => t('G Suite Domain'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['settings']['domain']['use_domain'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use G Suite domain!'),
    '#description' => t('If you want to restrict access to only members of your G Suite domain use this option.'),
    '#default_value' => variable_get('use_domain', FALSE),
  );
  $form['settings']['domain']['domain_name'] = array(
    '#type' => 'textfield',
    '#title' => t('G Suite domain'),
    '#description' => t('Example: domain.com'),
    '#default_value' => variable_get('domain_name', ''),
    '#states' => array(
      'visible' => array(
        ':input[name="use_domain"]' => array('checked' => TRUE),
      ), 'required' => array(
        ':input[name="use_domain"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['settings']['pages_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pages'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $options = [
    'front' => t('Show on the front page'),
    'login' => t('Show on the login page'),
    'register' => t('Show on the register page'),
  ];
  $form['settings']['pages_fieldset']['default_pages'] = [
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => variable_get('default_pages', [
      'front' => 'front',
      'login' => 'login',
      'register' => 'register',
    ]),
  ];
  $form['settings']['pages_fieldset']['pages'] = [
    '#type' => 'textarea',
    '#title' => 'Pages',
    '#default_value' => variable_get('form_element_pages'),
    '#description' => t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are blog for the blog page and blog/* for every personal blog."),
  ];
  $options = [
    'show' => t('Show for the listed pages'),
    'hide' => t('Hide for the listed pages'),
  ];
  $form['settings']['pages_fieldset']['pages_option'] = [
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => variable_get('pages_option') ?: 'show',
  ];
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['#validate'][] = 'google_one_tap_settings_validate';
  $form['#submit'][] = 'google_one_tap_settings_submit';

  return $form;
}

/**
 * Implements hook_FORM_ID_validate().
 */
function google_one_tap_settings_validate($form, &$form_state) {
  if ($form_state['values']['use_domain'] == TRUE && empty($form_state['values']['domain_name'])) {
    form_set_error('domain_name', t('This field is required'));
  }
}

/**
 * Implements hook_FORM_ID_submit().
 */
function google_one_tap_settings_submit($form, &$form_state) {
  $values = $form_state['values'];
  // If have disabled domain restriction reset domain name.
  if ($values['use_domain'] == FALSE && !empty($values['domain_name'])) {
    variable_del('domain_name');
    variable_set('use_domain', $values['use_domain']);
  }
  else {
    variable_set('domain_name', $values['domain_name']);
    variable_set('use_domain', $values['use_domain']);
  }

  if (!empty($values['pages'])) {
    $pages = preg_split("/\\r\\n|\\r|\\n/", $values['pages']);
  }
  else {
    $pages = '';
  }
  variable_set('default_pages', $values['default_pages']);
  variable_set('form_element_pages', $values['pages']);
  variable_set('pages', $pages);
  variable_set('pages_option', $values['pages_option']);
  variable_set('gauth_name', $values['gauth_name']);
  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Generate username.
 *
 * @param string $name
 *   String variable.
 *
 * @return string
 *   Return generated string.
 */
function findNextAvailableAccountName($name) {
  $count = 0;
  $old_name = $name;
  while (accountNameIsRegistered($name)) {
    $count++;
    $name = $old_name . '_' . $count;
  };

  return $name;
}

/**
 * Function checks if account is registered.
 *
 * @param string $name
 *   String name variable.
 *
 * @return mixed
 *   Return true or false.
 */
function accountNameIsRegistered($name) {
  return db_query("SELECT u.name as num_users FROM users u WHERE u.name = :name", [':name' => $name])->fetchField();
}

/**
 * Implements hook_user_logout().
 */
function google_one_tap_user_logout($account) {
  // When user log's out set cookie.
  user_cookie_save(['user_logged_out' => TRUE]);
}
