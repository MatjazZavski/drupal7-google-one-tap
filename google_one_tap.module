<?php

/**
 * Implements hook_preprocess_page().
 */
function google_one_tap_preprocess_page(&$variables) {
  // Return if user is anonymous, not on the front page,
  // login page or register page.
  if (!user_is_anonymous()) {
    return;
  } elseif (!drupal_is_front_page() && current_path() != 'user/login' && current_path() != 'user/registration') {
    return;
  }
  // Prevent login after user log's out.
  if (!empty($_COOKIE['Drupal_visitor_user_logged_out'])) {
    user_cookie_delete('user_logged_out');
    drupal_add_js(['logged_out' => 'true'], 'setting');
  }
  // Add Google One Tap library, custom js and sent client id to custom JS.
  else {
    $client = gauth_client_get(variable_get('gauth_name'), FALSE);
    drupal_add_js('https://smartlock.google.com/client', 'external');
    drupal_add_js(drupal_get_path('module', 'google_one_tap') . '/google-one-tap.js');
    drupal_add_js(['client_id' => $client->getClientId()], 'setting');
  }
}

/**
 * Implements hook_menu().
 */
function google_one_tap_menu() {
  $items = [];

  // Google settings menu.
  $items['admin/config/services/google_one_tap'] = [
    'title'           => 'Google One Tap Settings',
    'description'     => 'Google One Tap settings.',
    'page callback' => 'drupal_get_form',
    'page arguments'  => ['google_one_tap_settings_form'],
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  ];
  // Callback for google one tap login.
  $items['google-one-tap/login'] = [
    'page callback' => '_google_one_tap_user_login',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Callback function when user log's in.
 *
 * @return bool
 *   Return if error.
 *
 * @throws \Exception
 */
function _google_one_tap_user_login() {
  // Check if we have function and valid token.
  $info = libraries_load('google-api-php-client');
  if (!$info['loaded']) {
    drupal_set_message(t("Can't authenticate with google as library is missing check Status report or Readme for requirements"), 'error');

    return FALSE;
  }
  if (!$token = $_POST['idToken']) {
    throw new Exception('Missing idToken');
  }

  // Verify token.
  $client = gauth_client_get(variable_get('gauth_name'), FALSE);
  $payload = $client->verifyIdToken($token);
  if (!$payload) {
    throw new Exception('Invalid Token');
  }

  // Checks if we are using option domain restriction.
  if (variable_get('use_domain')) {
    if ($payload['hd'] != variable_get('domain_name')) {
      drupal_set_message(t('You are not authenticated user of domain %domain', ['%domain' => variable_get('domain_name')]), 'error');
      user_cookie_save(['user_logged_out' => TRUE]);
      return NULL;
    }
  }

  // Throw exception for wrong email.
  if (empty($payload['email']) || !valid_email_address($payload['email'])) {
    throw new Exception('Incorrect email address');
  }

  // If user doesn't exist create new one.
  if (!$user = user_load_by_mail($payload['email'])) {
    // Add notice.
    watchdog(WATCHDOG_NOTICE, 'Registering a new user for &mail', ['%mail' => $payload['email']]);
    $edit = array(
      'name' => findNextAvailableAccountName($payload['name']),
      'mail' => $payload['email'],
      'status' => 1,
    );
    $user = '';
  }
  // If user is blocked throw exception.
  elseif (user_is_blocked($user->name)) {
    throw new Exception('The user has not been activated or is blocked.');
  }
  // If we have user decode std class to array.
  else {
    $edit = json_decode(json_encode($user), TRUE);
  }

  // Data alter for adding new user variables.
  drupal_alter('google_one_tap_new_user', $edit);

  // Save users data.
  $user = user_save($user, $edit);

  // Login user.
  $user_id['uid'] = $user->uid;
  user_login_submit('', $user_id);
}

/**
 * Implements hook_FORM_ID_form().
 *
 * Configuration form for google one tap.
 */
function google_one_tap_settings_form($form, &$form_state) {
  // Get all users from gauth.
  $query = db_select('gauth_accounts', 'ga');
  $query->fields('ga');
  $result = $query->execute()->fetchAll();

  $options = array();
  $options[''] = t('Select a user');
  foreach ($result as $item) {
    $options[$item->id] = $item->name;
  }
  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['settings']['gauth_name'] = array(
    '#type' => 'select',
    '#title' => t('User'),
    '#description' => t('You need to select account from gauth module.'),
    '#default_value' => variable_get('gauth_name', ''),
    '#required' => TRUE ,
    '#options' => $options,
    '#weight' => -10,
  );
  $form['settings']['domain'] = array(
    '#type' => 'fieldset',
    '#title' => t('G Suite Domain'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['settings']['domain']['use_domain'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use G Suite domain!'),
    '#description' => t('If you want to restrict access to only members of your G Suite domain use this option.'),
    '#default_value' => variable_get('use_domain', FALSE),
  );
  $form['settings']['domain']['domain_name'] = array(
    '#type' => 'textfield',
    '#title' => t('G Suite domain'),
    '#description' => t('Example: domain.com'),
    '#default_value' => variable_get('domain_name', ''),
    '#states' => array(
      'visible' => array(
        ':input[name="use_domain"]' => array('checked' => TRUE),
      ), 'required' => array(
        ':input[name="use_domain"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['#validate'][] = 'google_one_tap_settings_validate';
  $form['#submit'][] = 'google_one_tap_settings_submit';

  return $form;
}

/**
 * Implements hook_FORM_ID_validate().
 */
function google_one_tap_settings_validate($form, &$form_state) {
  if ($form_state['values']['use_domain'] == TRUE && empty($form_state['values']['domain_name'])) {
    form_set_error('domain_name', t('This field is required'));
  }
}

/**
 * Implements hook_FORM_ID_submit().
 */
function google_one_tap_settings_submit($form, &$form_state) {
  // If have disabled domain restriction reset domain name.
  if ($form_state['values']['use_domain'] == FALSE && !empty($form_state['values']['domain_name'])) {
    variable_del('domain_name');
    variable_set('use_domain', $form_state['values']['use_domain']);
  } else {
    variable_set('domain_name', $form_state['values']['domain_name']);
    variable_set('use_domain', $form_state['values']['use_domain']);
  }
  variable_set('gauth_name', $form_state['values']['gauth_name']);
  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Generate username.
 *
 * @param string $name
 *   String variable.
 *
 * @return string
 *   Return generated string.
 */
function findNextAvailableAccountName($name) {
  $count = 0;
  $old_name = $name;
  while (accountNameIsRegistered($name)) {
    $count++;
    $name = $old_name . '_' . $count;
  };

  return $name;
}

/**
 * Function checks if account is registered.
 *
 * @param string $name
 *   String name variable.
 *
 * @return mixed
 *   Return true or false.
 */
function accountNameIsRegistered($name) {
  return db_query("SELECT u.name as num_users FROM users u WHERE u.name = :name", [':name' => $name])->fetchField();
}

/**
 * Implements hook_user_logout().
 */
function google_one_tap_user_logout($account) {
  // When user log's out set cookie.
  user_cookie_save(['user_logged_out' => TRUE]);
}
