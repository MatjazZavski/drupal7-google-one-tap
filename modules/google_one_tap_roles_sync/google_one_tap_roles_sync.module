<?php

/**
 * @file
 * Main functionality for roles sync.
 */

/**
 * Implements hook_FROM_ID_alter().
 */
function google_one_tap_roles_sync_form_google_one_tap_settings_form_alter(&$form, &$form_state, $form_id) {
  // Load library.
  $info = libraries_load('google-api-php-client');
  if (!$info['loaded']) {
    drupal_set_message(t("Can't authenticate with google as library is missing check Status report or Readme for requirements"), 'error');
    return FALSE;
  }
  // Set form element sync roles checkbox.
  $form['settings']['domain']['sync_roles'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sync roles'),
    '#default_value' => variable_get('sync_roles', FALSE),
    '#description' => t('Use this option if you want to sync roles from Google into Drupal, please provide a valid G Suite domain.'),
    '#states' => array(
      'visible' => array(
        ':input[name="use_domain"]' => array('checked' => TRUE),
      ),
    ),
    '#ajax' => array(
      'callback' => '_google_one_tap_groups_form_element',
      'wrapper' => 'checkboxes-div',
    ),
  );
  if (isset($form_state['values']['sync_roles'])) {
    if ($form_state['values']['sync_roles'] == FALSE) {
      $class = 'element-hidden';
    }
    else {
      $class = '';
    }
  }
  elseif (variable_get('sync_roles') == FALSE) {
    $class = 'element-hidden';
  }
  else {
    $class = '';
  }
  $form['settings']['domain']['roles_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Roles'),
    '#description' => t('In select field are displayed roles from Drupal, in label is displayed group from Google.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => array(
      'class' => array($class),
    ),
    '#prefix' => '<div id="checkboxes-div">',
    '#suffix' => '</div>',
  );

  $domain_name = isset($form_state['values']['domain_name']) ? $form_state['values']['domain_name'] : variable_get('domain_name');
  $gauth_name = isset($form_state['values']['gauth_name']) ? $form_state['values']['gauth_name'] : variable_get('gauth_name');
  // Check if domain and auth user is set.
  if ($domain_name && $gauth_name) {
    // Get client and set service.
    $client = gauth_client_get($gauth_name, FALSE);
    $service = new Google_Service_Directory($client);
    // Get all groups.
    $result = $service->groups->listGroups(['domain' => $domain_name]);
    $g_groups = $result->getGroups();
    // Go through each group.
    $groups = [];
    foreach ($g_groups as $group) {
      // All characters bust be lower case and replace spaces with '_'.
      $name = str_replace(' ', '_', strtolower($group->getName()));
      // Save to array.
      $groups['group_' . $name] = $group->getName();
    }
    // Get all roles.
    $roles = user_roles();
    $options = array();
    $options[''] = t('- None -');
    // Go through each role and save it to array if is not anonymous.
    foreach ($roles as $role) {
      if ($role != 'anonymous user' && $role != 'authenticated user') {
        $role = user_role_load_by_name($role);
        $options[$role->rid] = $role->name;
      }
    }
    // Check if we actually have any groups in G Suite.
    if (!empty($groups)) {
      $google_groups = variable_get('google_groups');
      // Go through each group.
      foreach ($groups as $key => $group) {
        // If we already defined roles for each group set them as default.
        if (!empty($google_groups)) {
          $searched = $google_groups[$key] ?: '';
        } else {
          $searched = '';
        }
        $form['settings']['domain']['roles_fieldset'][$key] = array(
          '#type' => 'select',
          '#title' => $group,
          '#default_value' => $searched,
          '#options' => $options,
        );

      }
    }
  }
  // Custom submit handler.
  $form['#submit'][] = 'google_one_tap_roles_sync_submit_form';
}

/**
 * Return roles fieldset when we select checkbox roles sync.
 *
 * @param array $form
 *   Form element.
 * @param array $form_state
 *   Form state element.
 *
 * @return mixed
 *   Return Form.
 */
function _google_one_tap_groups_form_element(&$form, &$form_state) {
  return $form['settings']['domain']['roles_fieldset'];
}

/**
 * Implements hook_FORM_ID_submit().
 */
function google_one_tap_roles_sync_submit_form($form, &$form_state) {
  $values = $form_state['values'];
  // If we don't have enabled option use domain hide sync roles option.
  if ($values['use_domain'] == FALSE) {
    variable_set('sync_roles', 0);
  }
  else {
    variable_set('sync_roles', $values['sync_roles']);
  }

  $groups = array();
  // Go through each group.
  foreach ($values as $key => $value) {
    // If key of array $values starts with group_ save to array.
    if (strpos($key, 'group_') === 0) {
      if (variable_get('sync_roles') == FALSE) {
        continue;
      }
      else {
        $groups[$key] = $value;
      }
    }
  }
  // Save it to our database under array google_groups.
  variable_set('google_groups', $groups);
}

/**
 * Implements hook_data_alter().
 */
function google_one_tap_roles_sync_google_one_tap_new_user_alter(&$edit) {
  // If we are using option sync roles, sync them.
  if (variable_get('sync_roles') && variable_get('domain_name')) {
    // Get client and set service.
    $client = gauth_client_get(variable_get('gauth_name'), FALSE);
    $service = new Google_Service_Directory($client);
    // Get all groups associated with user.
    $result = $service->groups->listGroups(['domain' => variable_get('domain_name'), 'userKey' => $edit['mail']]);
    $g_groups = $result->getGroups();

    // Go through each role and add to account if its assigned to the user.
    $google_roles = [];
    foreach ($g_groups as $group) {
      // All characters bust be lower case and replace spaces with '_'.
      $name = str_replace(' ', '_', strtolower('group_' . $group->getName()));
      $saved_groups = variable_get('google_groups');
      // Check if we have set role for this group.
      if ($searched = $saved_groups[$name]) {
        // Get role and save it to array for later use.
        $role = user_role_load($searched);
        $google_roles[] = $role->name;
        // Check if role is not anonymous or authenticated,
        // because authenticated is default role which
        // is getting added automatically.
        if ($role->name !== 'anonymous user' && $role->name !== 'authenticated user') {
          // Check if user doesn't have this role.
          if ($edit['roles'][$role->rid] !== $role->name) {
            // Add role to user.
            $edit['roles'][$role->rid] = $role->name;
            continue;
          }
        }
      }
    }
    // Check if we have any G Suite roles.
    if (!empty($google_roles)) {
      // Get all roles we defined in the UI.
      $google_groups = variable_get('google_groups');
      $config_defined_roles = [];
      foreach ($google_groups as $rid) {
        $role = user_role_load($rid);
        if ($role->name !== 'anonymous user' && $role->name !== 'authenticated user') {
          $config_defined_roles[$role->rid] = $role->name;
        }
      }
      $mapped_roles = array();
      // User roles from Google.
      foreach ($google_roles as $role) {
        if (array_search($role, $config_defined_roles) !== FALSE) {
          $mapped_roles[] = $role;
        }
      }

      // Get all roles from user.
      // Get all google roles.
      foreach ($edit['roles'] as $rid => $role_name) {
        if (array_search($role_name, $config_defined_roles) !== FALSE) {
          if (array_search($role_name, $mapped_roles) === FALSE) {
            unset($edit['roles'][$rid]);
          }
        }
      }
    }
  }
}
