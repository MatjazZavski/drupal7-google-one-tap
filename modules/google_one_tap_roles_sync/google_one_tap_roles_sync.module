<?php

/**
 * Implements hook_FROM_ID_alter().
 */
function google_one_tap_roles_sync_form_google_one_tap_settings_form_alter(&$form, &$form_state, $form_id) {
  // Load library.
  $info = libraries_load('google-api-php-client');
  if (!$info['loaded']) {
    drupal_set_message(t("Can't authenticate with google as library is missing check Status report or Readme for requirements"), 'error');
    return FALSE;
  }

  // Get all groups.
  $client = gauth_client_get(variable_get('gauth_name'), FALSE);
  $service = new Google_Service_Directory($client);
  $result = $service->groups->listGroups(['domain' => /*variable_get('domain_name')*/'agiledrop.com']);
  $g_groups = $result->getGroups();
  $groups = [];
  foreach ($g_groups as $group) {
    $groups[$group->getName()] = $group->getName();
  }

  $form['settings']['domain']['sync_roles'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sync roles'),
    '#default_value' => variable_get('sync_roles', FALSE),
    '#description' => t('Use this option if you want to sync roles from Google into Drupal.'),
    '#states' => array(
      'visible' => array(
        ':input[name="use_domain"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['settings']['domain']['roles_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Roles'),
    '#description' => t('In select field are displayed roles from Drupal, in label is displayed group from Google.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="sync_roles"]' => array('checked' => TRUE),
        ':input[name="use_domain"]' => array('checked' => TRUE),
      ),
    ),
  );

  // Get all roles.
  $roles = user_roles();
  $options = array();
  foreach ($roles as $role) {
    if ($role != 'anonymous user') {
      $options[$role] = $role;
    }
  }
  if (!empty($groups)) {
    foreach ($groups as $group) {
      $form['settings']['domain']['roles_fieldset']['group_' . $group] = array(
        '#type' => 'select',
        '#title' => $group,
        '#default_value' => variable_get('group_' . $group, ''),
        '#options' => $options,
      );
    }
  }
  $form['#submit'][] = 'google_one_tap_roles_sync_submit_form';
}

/**
 * Implements hook_FORM_ID_submit().
 */
function google_one_tap_roles_sync_submit_form($form, &$form_state) {
  $values = $form_state['values'];
  // If we don't have enabled option use domain hide sync roles option.
  if ($values['use_domain'] == FALSE) {
    variable_set('sync_roles', FALSE);
  }
  else {
    variable_set('sync_roles', $values['sync_roles']);
  }

  // Go through each group and set selected Role.
  foreach ($values as $key => $value) {
    if (strpos($key, 'group_') === 0) {
      if (variable_get('sync_roles') == FALSE) {
        variable_set($key, '');
      }
      else {
        variable_set($key, $value);
      }
    }
  }
}

/**
 * Implements hook_data_alter().
 */
function google_one_tap_roles_sync_google_one_tap_new_user_alter(&$edit) {
  // If we are using option sync roles, sync them.
  if (variable_get('sync_roles')) {
    // Get client.
    $client = gauth_client_get(variable_get('gauth_name'), FALSE);
    $service = new Google_Service_Directory($client);
    // Get all groups associated with user.
    $result = $service->groups->listGroups(['domain' => variable_get('domain_name'), 'userKey' => $edit['mail']]);
    $g_groups = $result->getGroups();

    $group_roles = array();

    // Add role to user.
    foreach ($g_groups as $group) {
      // Check if we have set role for this group.
      if ($group_role = variable_get('group_' . $group->getName())) {
        $group_roles[] = $group_role;
        // Check if role is not anonymous or authenticated,
        // because authenticated is default role which
        // is getting added automatically.
        if ($group_role !== 'anonymous user' && $group_role !== 'authenticated user') {
          // Load role.
          $role = user_role_load_by_name($group_role);
          // Check if user doesn't have this role.
          if ($edit['roles'][$role->rid] !== $group_role) {
            // Add role to user.
            $edit['roles'][$role->rid] = $role->name;
            variable_set('user_role_' . $role->rid, $role->rid);
            continue;
          }
        }
      }
    }
    // Remove role from user in Drupal if role is not set
    // in G Suite for this group.
    if (!empty($group_roles)) {
      foreach ($edit['roles'] as $key => $user_role) {
        // Check if user role is in G Suite if not remove it.
        if (array_search($user_role, $group_roles) === FALSE && ($user_role !== 'anonymous user' && $user_role !== 'authenticated user') && variable_get('user_role_' . $key)) {
          // Remove role from user.
          variable_del('user_role_' . $key);
          unset($edit['roles'][$key]);
        }
      }
    }
  }
}
